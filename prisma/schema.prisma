// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] @relation("RoleUser")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[] @relation("CategoryProduct")
}

model Product {
  id          Int                 @id @default(autoincrement())
  name        String
  price       Float
  image       String
  description String
  quantity    Int
  category    Category            @relation("CategoryProduct", fields: [category_id], references: [id])
  owner       User                @relation("OwnerProduct", fields: [owner_id], references: [id])
  streams     UserProductStream[] @relation("ProductStreams")
  transaction Transaction[]       @relation("ProductTransaction")
  owner_id    Int
  category_id Int

  @@index([name])
}

model User {
  id            Int                 @id @default(autoincrement())
  email         String              @unique
  name          String
  password      String
  balance       Float               @default(0)
  role          Role                @relation("RoleUser", fields: [role_id], references: [id])
  role_id       Int
  sentChats     Chat[]              @relation("Sender")
  receivedChats Chat[]              @relation("Receiver")
  ownerProduct  Product[]           @relation("OwnerProduct")
  streams       UserProductStream[] @relation("StreamerStreams")
  transaction   Transaction[]       @relation("UserTransaction")

  @@index([name, email])
}

enum Status {
  PENDING
  REJECTED
  ACCEPTED
}

enum typeTransaction {
  SPEND
  TOPUP
}

model UserProductStream {
  id                Int       @id @default(autoincrement())
  streamerStream    User      @relation("StreamerStreams", fields: [streamer_id], references: [id])
  productStream     Product   @relation("ProductStreams", fields: [product_stream_id], references: [id])
  streamer_id       Int
  product_stream_id Int
  status            Status    @default(PENDING)
  createdAt         DateTime  @default(now())
  expiredAt         DateTime?
}

model Chat {
  id          Int      @id @default(autoincrement())
  message     String
  sender_id   Int
  receiver_id Int
  sender      User     @relation("Sender", fields: [sender_id], references: [id])
  receiver    User     @relation("Receiver", fields: [receiver_id], references: [id])
  createdAt   DateTime @default(now())

  @@index([sender_id, receiver_id])
}

// buy product/topup balance
model Transaction {
  id               Int             @id @default(autoincrement())
  User             User            @relation("UserTransaction", fields: [user_id], references: [id])
  Product          Product?        @relation("ProductTransaction", fields: [product_id], references: [id])
  user_id          Int
  product_id       Int?
  proofTransaction String
  status           Status          @default(PENDING)
  totalPrice       Float
  quantity         Int
  type             typeTransaction
  createdAt        DateTime        @default(now())
}
